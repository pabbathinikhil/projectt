                    {/* <p>Connected to wallet on network "{networkId}". Address: {address}</p> */}

                    <div
                        className='flex flex-row-reverse ...'
                    >
                        <p
                            className='mr-40 text-black font-bold'
                        >Balance: {balance}</p>

                    </div>

                    <div className="group">
                        <div className=''>
                            <div
                                className='flex flex-row-reverse ...
                                mr-44 text-black font-bold'
                            >Recipient address
                            </div>
                            <div
                                className='flex flex-row-reverse ...'
                            >
                                {/* <input
                                    // bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500

                                    className='bg-gray-50 border-solid border-2 border-sky-200 ...
                                    hover:border-sky-500 rounded-md mr-36
                                    '
                                    value={spendTo}
                                    onChange={(e) => setSpendTo(e.target.value)}
                                    placeholder="ak_â€¦"

                                /> */}
                                <label
                                className='bg-gray-50 border-solid border-1
                                 rounded-md mr-52   '
                                >  Yaman</label>
                            </div>
                        </div>
                        <div>
                            <div
                                className='flex flex-row-reverse ...
                                mr-48 text-black font-bold
                                '
                            >Coins amount</div>
                            <div
                                className='flex flex-row-reverse ...'
                            >
                                <input
                                    className='flex flex-row-reverse ...'
                                    value={spendAmount}
                                    onChange={(e) => setSpendAmount(e.target.value)}
                                />
                            </div>
                        </div>
                        <div
                            className='flex flex-row-reverse ...'
                        >
                            <button
                                className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full'
                                onClick={handleSpendClick}>
                                Spend
                            </button>

                        </div>


                    </div>














import React, { useState } from 'react';
import './assets/Chatbot.css';
import { AE_AMOUNT_FORMATS } from '@aeternity/aepp-sdk';

const Chatbot = ({ closeChatbot, instance, address }) => {
  const [botMessages, setBotMessages] = useState([]);
  const [userInput, setUserInput] = useState('');
  const [transactionType, setTransactionType] = useState('');
  const [publicKey, setPublicKey] = useState(null);
  const [amount, setAmount] = useState('');
  const [confirmSend, setConfirmSend] = useState(false);

  const handleInputChange = (e) => {
    setUserInput(e.target.value);
  };

  const handleSend = () => {
    setBotMessages((prevMessages) => [
      ...prevMessages,
      { id: 'user', text: userInput },
    ]);

    if (transactionType === 'send' && userInput !== '' && !publicKey && !amount && !confirmSend) {
      setPublicKey(userInput);
      setBotMessages((prevMessages) => [
        ...prevMessages,
        { id: 'bot', text: 'Enter the amount to send:' },
      ]);
    } else if (transactionType === 'send' && publicKey && !amount && !confirmSend) {
      setAmount(userInput);
      setBotMessages((prevMessages) => [
        ...prevMessages,
        { id: 'bot', text: `Enter the amount to send:` },
      ]);
    } else if (transactionType === 'send' && publicKey && amount && !confirmSend) {
      setConfirmSend(true);
      setBotMessages((prevMessages) => [
        ...prevMessages,
        { id: 'bot', text: `Are you sure you want to send ${amount}?` },
      ]);
    } else if (transactionType === 'send' && publicKey && amount && confirmSend) {
      handleYes();
    }
  };

  const handleYes = async () => {
    try {
      const spendTo = 'ak_2QaAzpW4w4pnPNDdrgdLHu5v4bGMxVzUD2F16X3aUrayPcBzZm';//publicKey; 
      const spendAmount = amount; 

      const result = await instance.spend(spendAmount, spendTo);
      console.log(result);

      setBotMessages([
        ...botMessages,
        { id: 'bot', text: `Successfully sent ${amount} to recipient! Transaction Id: ${result.hash}` },
      ]);
      console.log(result);
    } catch (error) {
      setBotMessages([
        ...botMessages,
        { id: 'bot', text: `Transaction failed: ${error.message}` },
      ]);
      console.error('Transaction failed:', error);
    }

    setConfirmSend(false);
    setUserInput('');
    setTransactionType('');
    setPublicKey(null);
    setAmount('');
  };

  const handleNo = () => {
    setBotMessages([
      ...botMessages,
      { id: 'bot', text: 'Transaction cancelled.' },
    ]);
    setConfirmSend(false);
    setUserInput('');
    setTransactionType('');
    setPublicKey(null);
    setAmount('');
  };

  const handleOptionSelection = (type) => {
    setTransactionType(type);
    // console.log("hhh");
    // console.log(type);

    if (type === 'send') {
      setBotMessages([
        ...botMessages,
        { id: 'bot', text: `Please enter the recipient's public key:` },
      ]);
    } else if (type === 'getbalance') {
        console.log("hlo");
      getBalance();
    }
  };

  const getBalance = async () => {
    try {
        console.log("hl");
      const balance = await instance.getBalance(address, { format: AE_AMOUNT_FORMATS.AE });
      setBotMessages([
        ...botMessages,
        { id: 'bot', text: `Your current balance is ${balance}` },
      ]);
    } catch (error) {
      setBotMessages([
        ...botMessages,
        { id: 'bot', text: `Failed to retrieve balance: ${error.message}` },
      ]);
    }
  };

  const startChatAgain = () => {
    setBotMessages([]);
    setTransactionType('');
    setPublicKey(null);
    setAmount('');
    setConfirmSend(false);
    setUserInput('');
  };
    return (
        <div className='fixed bottom-4 right-4 w-80 h-96 bg-white border border-gray-300 rounded-md shadow-md overflow-hidden chatbot'>
            
            <div className='flex justify-between items-center p-4 border-b border-gray-300 bg-gray-100'>
                <h2 className='text-lg font-bold'>Chatbot</h2>
                <button onClick={closeChatbot} className='focus:outline-none'>
                    <svg
                        xmlns='http://www.w3.org/2000/svg'
                        className='h-5 w-5 text-gray-600'
                        viewBox='0 0 20 20'
                        fill='currentColor'
                    >
                        <path
                            fillRule='evenodd'
                            d='M13.414 12l3.293 3.293a1 1 0 01-1.414 1.414L12 13.414l-3.293 3.293a1 1 0 01-1.414-1.414L10.586 12 7.293 8.707a1 1 0 011.414-1.414L12 10.586l3.293-3.293a1 1 0 111.414 1.414L13.414 12z'
                            clipRule='evenodd'
                        />
                    </svg>
                </button>
            </div>

            
            <div className='overflow-y-auto p-4 h-64 chatbot-messages'>
               
                
                    <div className='message bg-gray-200 p-2 rounded-md mb-2'>
                        Hello user, how can I help you today?
                    </div>
                {botMessages.map((message, index) => (
                    <div key={index} className='message bg-gray-200 p-2 rounded-md mb-2'>
                        {message.text}
                    </div>
                ))}
            </div>

            <div className='p-4 border-t border-gray-300 bg-gray-100'>
                
                {!transactionType && (
                    <div className='flex gap-2'>
                        <button
                            className='px-4 py-2 bg-blue-500 text-white rounded-md'
                            onClick={() => handleOptionSelection('send')}
                        >
                            Send Money
                        </button>
                        <button
                            className='px-4 py-2 bg-blue-500 text-white rounded-md'
                            onClick={() => handleOptionSelection('getbalance')}
                        >
                           getBalance
                        </button>
                    </div>
                )}

                
                {transactionType === 'send' && !publicKey && (
                    <div className='flex gap-2'>
                        <input
                            type='text'
                            placeholder="Recipient's Public Key"
                            className='flex-1 rounded-md p-2 border border-gray-300 focus:outline-none focus:ring focus:border-blue-500'
                            value={userInput}
                            onChange={handleInputChange}
                        />
                        <button
                            onClick={handleSend}
                            className='px-4 py-2 bg-blue-500 text-white rounded-md'
                        >
                            Next
                        </button>
                    </div>
                )}

                {transactionType === 'send' && publicKey && !confirmSend && (
                    <div className='flex gap-2'>
                        <input
                            type='text'
                            placeholder='Enter Amount'
                            className='flex-1 rounded-md p-2 border border-gray-300 focus:outline-none focus:ring focus:border-blue-500'
                            value={amount}
                            onChange={(e) => setAmount(e.target.value)}
                        />
                        <button
                            onClick={handleSend}
                            className='px-4 py-2 bg-blue-500 text-white rounded-md'
                        >
                            Next
                        </button>
                    </div>
                )}

               
                {confirmSend && (
                    <div className='flex gap-2'>
                        <button
                            onClick={handleYes}
                            className='px-4 py-2 bg-green-500 text-white rounded-md'
                        >
                            Yes
                        </button>
                        <button
                            onClick={handleNo}
                            className='px-4 py-2 bg-red-500 text-white rounded-md'
                        >
                            No
                        </button>
                    </div>
                )}

                
                <div className='flex justify-center mt-4'>
                    <button
                        onClick={startChatAgain}
                        className='px-4 py-2 bg-green-500 text-white rounded-md'
                        style={{ display: transactionType ? 'block' : 'none' }}
                    >
                        Start Chat Again
                    </button>
                </div>
            </div>
        </div>
    );
};

export default Chatbot;


this is the code for chat bot which handle converse with the user 

there are two buttons in this 
get balance and send money

get balance shows the money in the wallet
and send button provokes some questions

1- enter the public key of the recipient i dont want to bot to ask the public key of recipient 
because i want to integrate this bot for donation in which recipient address will be hard coded 
i just want the bot to ask how many coins to donate in the charity and then confirm as the transaction